package cz.dangelcz.print.grfgen.gui.window;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JSpinner;
import javax.swing.JSlider;
import javax.swing.JButton;
import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.ActionEvent;
import javax.swing.SwingUtilities;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.lang.reflect.Field;
import java.util.List;

import javax.swing.event.ChangeListener;

import cz.dangelcz.print.grfgen.gui.window.handlers.FileDropHandler;
import cz.dangelcz.print.grfgen.launch.ApplicationConfig;
import cz.dangelcz.print.grfgen.libs.GeneralHelper;
import cz.dangelcz.print.grfgen.libs.IoHelper;
import cz.dangelcz.print.grfgen.libs.Reflection;
import cz.dangelcz.print.grfgen.libs.UiHelper;
import cz.dangelcz.print.grfgen.logic.GrfGenerator;
import cz.dangelcz.print.grfgen.logic.ImageProcessing;
import cz.dangelcz.print.grfgen.logic.JFileChooserImageFileFilter;

import javax.swing.event.ChangeEvent;

/*
 * Class generated by the Eclipse Window Builder.
 * */
public class GrfGeneratorWindow
{
	JFrame grfGeneratorFrame;

	JTextField filePathInputField;
	JSpinner blacknessSpinner;
	JSlider blacknessSlider;
	JCheckBox useCompressionCheckBox;
	JButton turnLeftButton;
	JButton turnRightButton;
	JButton turn180Button;
	JButton flipHorizontalyButton;
	JButton flipVerticallyButton;
	JButton resetButton;

	JButton btnSaveGrf;
	JButton btnSaveZpl;

	ImagePanel originalImagePanel;
	ImagePanel outputImagePanel;

	JSpinner newWidthSpinner;
	JLabel originalSizeLabel;
	JSpinner newHeightSpinner;
	JCheckBox aspectRatioCheckBox;

	private boolean resolutionsSpinnerLock = false;

	// 'model' item
	private GrfGeneratorWindowData windowData;

	public GrfGeneratorWindow()
	{
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize()
	{
		grfGeneratorFrame = new JFrame();

		String version = GeneralHelper.getPomXmlVersion();
		grfGeneratorFrame.setTitle("GRF generator " + version);
		grfGeneratorFrame.setBounds(100, 100, 1300, 700);
		grfGeneratorFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		grfGeneratorFrame.getContentPane().setLayout(new BorderLayout(0, 0));

		registerSystemShortcuts();

		// dynamically create all components as empty ones
		constructComponents();

		GrfGeneratorWindowLayout layout = new GrfGeneratorWindowLayout(this);
		layout.layoutComponents();

		initEvents();
	}

	/**
	 * Generic instantiation of components
	 */
	private void constructComponents()
	{
		try
		{
			List<Field> fields = Reflection.fieldsOfClass(this.getClass(), JComponent.class);

			for (Field field : fields)
			{
				Object windowComponent = field.getType().newInstance();
				field.set(this, windowComponent);
			}
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new Error("Unable to construct application frame");
		}
	}

	private void initEvents()
	{
		filePathInputField.addMouseListener(new MouseAdapter()
		{
			@Override
			public void mousePressed(MouseEvent e)
			{
				chooseInputImage();
			}
		});

		blacknessSpinner.addChangeListener(new ChangeListener()
		{
			public void stateChanged(ChangeEvent e)
			{
				setBlackness((int) blacknessSpinner.getValue());
			}
		});

		blacknessSlider.addChangeListener(new ChangeListener()
		{
			public void stateChanged(ChangeEvent e)
			{
				setBlackness((int) blacknessSlider.getValue());
			}
		});

		btnSaveGrf.addActionListener(e -> {
			saveGrfOutput();
		});

		btnSaveZpl.addActionListener(e -> {
			saveZplOutput();
		});

		resetButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				windowData.resetTransformation();
				updateOutputImage();
			}
		});

		turnLeftButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				BufferedImage rotated = ImageProcessing.rotate90Left(windowData.getRotatedImage());
				windowData.setRotatedImageWithScaleSwitch(rotated);
				updateOutputImage();
			}
		});

		turnRightButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				BufferedImage rotated = ImageProcessing.rotate90Right(windowData.getRotatedImage());
				windowData.setRotatedImageWithScaleSwitch(rotated);
				updateOutputImage();
			}
		});

		turn180Button.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				BufferedImage rotated = ImageProcessing.rotate180(windowData.getRotatedImage());
				windowData.setRotatedImage(rotated);
				updateOutputImage();
			}
		});

		flipHorizontalyButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				BufferedImage rotated = ImageProcessing.flipHorizontaly(windowData.getRotatedImage());
				windowData.setRotatedImage(rotated);
				updateOutputImage();
			}
		});

		flipVerticallyButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				BufferedImage rotated = ImageProcessing.flipVerticaly(windowData.getRotatedImage());
				windowData.setRotatedImage(rotated);
				updateOutputImage();
			}
		});

		newWidthSpinner.addChangeListener(new ChangeListener()
		{
			public void stateChanged(ChangeEvent e)
			{
				if (resolutionsSpinnerLock)
				{
					return;
				}

				resolutionsSpinnerLock = true;

				int newWidth = (int) newWidthSpinner.getValue();
				windowData.setNewWidth(newWidth);

				if (windowData.keepAspectRatio())
				{
					int newHeight = (int) (newWidth / windowData.getAspectRatio());
					windowData.setNewHeight(newHeight);
					newHeightSpinner.setValue(newHeight);
				}

				applySizeChanges();

				resolutionsSpinnerLock = false;
			}
		});

		newHeightSpinner.addChangeListener(new ChangeListener()
		{
			public void stateChanged(ChangeEvent e)
			{
				if (resolutionsSpinnerLock)
				{
					return;
				}

				resolutionsSpinnerLock = true;

				int newHeight = (int) newHeightSpinner.getValue();
				windowData.setNewHeight(newHeight);

				if (windowData.keepAspectRatio())
				{
					int newWidth = (int) (newHeight * windowData.getAspectRatio());
					windowData.setNewWidth(newWidth);
					newWidthSpinner.setValue(newWidth);
				}

				applySizeChanges();
				resolutionsSpinnerLock = false;
			}
		});

		aspectRatioCheckBox.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				windowData.setKeepAspectRatio(aspectRatioCheckBox.isSelected());
			}
		});

		grfGeneratorFrame.setTransferHandler(new FileDropHandler()
		{
			@Override
			public void processInputFile(File file)
			{
				GrfGeneratorWindow.this.loadInputImage(file);
			}

		});
	}

	private void registerSystemShortcuts()
	{
		grfGeneratorFrame.getRootPane().registerKeyboardAction(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				chooseInputImage();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK), JComponent.WHEN_IN_FOCUSED_WINDOW);

		grfGeneratorFrame.getRootPane().registerKeyboardAction(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				saveGrfOutput();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_MASK), JComponent.WHEN_IN_FOCUSED_WINDOW);
	}

	public void enableComponents()
	{
		blacknessSpinner.setEnabled(true);
		blacknessSlider.setEnabled(true);
		useCompressionCheckBox.setEnabled(true);
		turnLeftButton.setEnabled(true);
		turnRightButton.setEnabled(true);
		turn180Button.setEnabled(true);
		flipHorizontalyButton.setEnabled(true);
		flipVerticallyButton.setEnabled(true);
		btnSaveGrf.setEnabled(true);
		btnSaveZpl.setEnabled(true);
		resetButton.setEnabled(true);
		newWidthSpinner.setEnabled(true);
		newHeightSpinner.setEnabled(true);
		aspectRatioCheckBox.setEnabled(true);
	}

	public void setBlackness(int value)
	{
		blacknessSlider.setValue(value);
		blacknessSpinner.setValue(value);
		windowData.setBlackness(value);

		if (windowData.getScaledImage() != null)
		{
			updateOutputImage();
		}
	}

	public void setVisible(boolean b)
	{
		grfGeneratorFrame.setVisible(b);
	}

	public void updateOutputImage()
	{
		BufferedImage outputImage = ImageProcessing.convertToBlackMask(windowData.getScaledImage(), windowData.getBlackness());
		windowData.setOutputImage(outputImage);

		originalImagePanel.setImage(windowData.getSourceImage());
		outputImagePanel.setImage(windowData.getOutputImage());

		setNewWidth(windowData.getScaledImage().getWidth());
		setNewHeight(windowData.getScaledImage().getHeight());

		repaintImages();
	}

	private void repaintImages()
	{
		originalImagePanel.repaint();
		outputImagePanel.repaint();
	}

	public void setModelInstance(GrfGeneratorWindowData data)
	{
		windowData = data;

		blacknessSlider.setValue(windowData.getBlackness());
		blacknessSpinner.setValue(windowData.getBlackness());
	}

	public void updateOriginalSizeLabel()
	{
		int width = windowData.getSourceImage().getWidth();
		int height = windowData.getSourceImage().getHeight();
		originalSizeLabel.setText("Original size " + width + " x " + height);
	}

	public void updateElementsFromModelData()
	{
		updateOriginalSizeLabel();
		aspectRatioCheckBox.setSelected(windowData.keepAspectRatio());
		newWidthSpinner.setValue(windowData.getNewWidth());
		newHeightSpinner.setValue(windowData.getNewHeight());
	}

	public void applySizeChanges()
	{
		int newWidth = windowData.getNewWidth();
		int newHeight = windowData.getNewHeight();

		if (windowData.getRotatedImage() != null && newWidth > 0 && newHeight > 0)
		{
			windowData.updateScaledImage();
			updateOutputImage();
		}
	}

	public void setNewWidth(int newWidth)
	{
		resolutionsSpinnerLock = true;
		newWidthSpinner.setValue(newWidth);
		resolutionsSpinnerLock = false;
	}

	public void setNewHeight(int newHeight)
	{
		resolutionsSpinnerLock = true;
		newHeightSpinner.setValue(newHeight);
		resolutionsSpinnerLock = false;
	}

	private void chooseInputImage()
	{
		SwingUtilities.invokeLater(() -> {
			JFileChooser jf = new JFileChooser(ApplicationConfig.DEFAULT_FILE_PATH);
			jf.setDialogTitle("Select image");
			jf.setFileFilter(new JFileChooserImageFileFilter());

			if (jf.showOpenDialog(grfGeneratorFrame) == JFileChooser.APPROVE_OPTION)
			{
				File file = jf.getSelectedFile();
				loadInputImage(file);
			}
		});
	}

	private GrfGenerator fillGeneratorObject()
	{
		GrfGenerator grf = new GrfGenerator();
		grf.setCompressHex(windowData.isCompress());
		grf.setBlacknessLimitPercentage(windowData.getBlackness());
		grf.loadImage(windowData.getOutputImage());
		return grf;
	}

	public void loadInputImage(File file)
	{
		filePathInputField.setText(file.getName());
		filePathInputField.setToolTipText(file.getAbsolutePath());

		windowData.loadSourceImage(file.getAbsolutePath());
		updateOutputImage();
		enableComponents();

		updateElementsFromModelData();
	}

	private File getFileToSave(String fileType)
	{
		if (windowData.getOutputImage() == null)
		{
			return null;
		}

		String outputFileName = windowData.getInputFilePath();
		outputFileName = IoHelper.getFileNameWithoutType(outputFileName) + "." + fileType;

		return UiHelper.getSaveFileChooser(grfGeneratorFrame, outputFileName);
	}

	private void saveZplOutput()
	{
		SwingUtilities.invokeLater(() -> {
			File file = getFileToSave("zpl");

			if (file != null)
			{
				GrfGenerator grf = fillGeneratorObject();
				IoHelper.saveTextFile(file, grf.getZpl(), true);
			}
		});
	}

	private void saveGrfOutput()
	{
		SwingUtilities.invokeLater(() -> {
			File file = getFileToSave("grf");

			if (file != null)
			{
				GrfGenerator grf = fillGeneratorObject();
				String grfData = grf.getGrf(file.getName());
				IoHelper.saveTextFile(file, grfData, true);
			}
		});
	}
}
